// <auto-generated />
using System;
using IndividualProject.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IndividualProject.Infrastructure.Migrations
{
    [DbContext(typeof(IndividualProjectDbContext))]
    [Migration("20241121135750_baseentityadded")]
    partial class baseentityadded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IndividualProject.Domain.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CarBrand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationPlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Car", (string)null);
                });

            modelBuilder.Entity("IndividualProject.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamID");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("IndividualProject.Domain.Entities.OfficeRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OfficeRoom", (string)null);
                });

            modelBuilder.Entity("IndividualProject.Domain.Entities.ParkingSpot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SpotName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ParkingSpot", (string)null);
                });

            modelBuilder.Entity("IndividualProject.Domain.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Team", (string)null);
                });

            modelBuilder.Entity("IndividualProject.Domain.Entities.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarID")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OccupationDate")
                        .HasColumnType("date");

                    b.Property<int>("OfficeRoomID")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ParkingArrivalTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("ParkingDepartureTime")
                        .HasColumnType("time");

                    b.Property<int>("ParkingSpotID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("OfficeRoomID");

                    b.HasIndex("ParkingSpotID");

                    b.ToTable("Track", (string)null);
                });

            modelBuilder.Entity("IndividualProject.Domain.Entities.Employee", b =>
                {
                    b.HasOne("IndividualProject.Domain.Entities.Team", "Team")
                        .WithMany("Employees")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("IndividualProject.Domain.Entities.Track", b =>
                {
                    b.HasOne("IndividualProject.Domain.Entities.Car", "Car")
                        .WithMany("Tracks")
                        .HasForeignKey("CarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IndividualProject.Domain.Entities.Employee", "Employee")
                        .WithMany("Tracks")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IndividualProject.Domain.Entities.OfficeRoom", "OfficeRoom")
                        .WithMany("Tracks")
                        .HasForeignKey("OfficeRoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IndividualProject.Domain.Entities.ParkingSpot", "ParkingSpot")
                        .WithMany("Tracks")
                        .HasForeignKey("ParkingSpotID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Employee");

                    b.Navigation("OfficeRoom");

                    b.Navigation("ParkingSpot");
                });

            modelBuilder.Entity("IndividualProject.Domain.Entities.Car", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("IndividualProject.Domain.Entities.Employee", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("IndividualProject.Domain.Entities.OfficeRoom", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("IndividualProject.Domain.Entities.ParkingSpot", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("IndividualProject.Domain.Entities.Team", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
